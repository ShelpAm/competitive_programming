#include <algorithm>
#include <array>
#include <bitset>
#include <cmath>
#include <cstddef>
#include <deque>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <ranges>
#include <set>
#include <stack>
#include <string>
#include <string_view>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

// configs
template<typename value_type> using vec1 = ::std::vector<value_type>;
using ::std::array;
using ::std::cin;
using ::std::cout;
using ::std::size_t;
using ::std::string;
using ::std::string_view;
using ::std::ranges::max;
using ::std::ranges::min;
using ::std::ranges::sort;
using ::std::operator""sv;
using ::std::numeric_limits;
using ::std::pair;
using ::std::ranges::views::drop;
using ::std::ranges::views::reverse;
using ::std::ranges::views::take;

[[maybe_unused]] char constexpr endl{'\n'};
[[maybe_unused]] size_t constexpr mod{998244353};
[[maybe_unused]] size_t constexpr big{0x3f3f3f3f};

namespace impl {
  template<typename value_type> using vec2 = std::vector<std::vector<value_type>>;
#ifdef __cpp_concepts
  template<typename T> concept is_pair = requires(T t) {
    t.first;
    t.second;
  };
#endif
  class io_accelerator {
  public:
    inline io_accelerator()
    {
      std::ios::sync_with_stdio(false);
      std::cin.tie(nullptr);
      // The following line needn't to be executed because the above line actually had done this.
      // std::cout.tie(nullptr);
    }
    io_accelerator(const io_accelerator&) = delete;
    io_accelerator(io_accelerator&&) = delete;
    io_accelerator& operator=(const io_accelerator&) = delete;
    io_accelerator& operator=(io_accelerator&&) = delete;
    inline ~io_accelerator()
    {
      std::ios::sync_with_stdio(true);
      std::cin.tie(&std::cout);
    }
  };
} // namespace impl
inline static bool check_max(auto&& value, auto&& other)
{
  if (value < other) {
    value = other;
    return true;
  }
  return false;
}
static inline bool check_min(auto&& value, auto&& other)
{
  if (value > other) {
    value = other;
    return true;
  }
  return false;
}
template<size_t i, size_t j, typename value_type> using arr2
    = std::array<std::array<value_type, j>, i>;
template<size_t i, size_t j> using arr2uz = arr2<i, j, size_t>;
template<size_t i, size_t j> using arr2ll = arr2<i, j, long long>;
template<typename value_type> class vec2 : public impl::vec2<value_type> {
public:
  vec2(size_t const i, size_t const j, value_type const& value = {})
      : impl::vec2<value_type>(i, std::vector<value_type>(j, value))
  {}
};
using vec2uz = vec2<size_t>;
using vec2ll = vec2<long long>;
auto&& operator>>(auto&& is, auto&& t)
{
  if constexpr (std::ranges::range<decltype(t)>) {
    for (auto&& ele: t) {
      is >> ele;
    }
  }
#ifdef __cpp_concepts
  else if constexpr (impl::is_pair<decltype(t)>) {
    is >> t.first >> t.second;
  }
#endif
  else {
    is >> t;
  }
  return is;
}
void print(auto const& t)
{
  if constexpr (std::ranges::range<decltype(t)>) {
    for (auto&& ele: t) {
      print(ele);
    }
    std::cout << endl;
  }
#ifdef __cpp_concepts
  else if constexpr (impl::is_pair<decltype(t)>) {
    std::cout << t.first << ": " << t.second << ", ";
  }
#endif
  else {
    std::cout << t << ' ';
  }
}
static inline void debug(std::string_view const sv, auto&& t)
{
#ifdef DEBUG
  std::cout << sv << ": ";
  print(t);
  std::cout << endl;
#endif
}
size_t quick_pow(size_t a, size_t n)
{
  a %= mod;
  size_t res{1};
  while (n != 0) {
    if ((n & 1) == 1) {
      res = res * a % mod;
    }
    a = a * a % mod;
    n /= 2;
  }
  return res;
}
size_t FUCK(size_t a, size_t b)
{
  return a * quick_pow(b, mod - 2) % mod;
}
size_t h, w;
bool valid(size_t i, size_t j)
{
  return i < h && j < w;
};
void paint(auto&& t, auto&& v, size_t i, size_t j, size_t r)
{
  if (!valid(i, j)) {
    return;
  }
  if (t[i][j] != 0 || v[i][j] == '.') {
    return;
  }

  t[i][j] = r;
  paint(t, v, i + 1, j, r);
  paint(t, v, i - 1, j, r);
  paint(t, v, i, j + 1, r);
  paint(t, v, i, j - 1, r);
}
static inline auto solve_case()
{
  cin >> h >> w;
  vec2<char> v(h, w);
  cin >> v;
  vec2uz t(h, w);

  size_t block{};
  size_t rear_type{1};
  size_t num_red{};
  for (size_t i{}; i != h; ++i) {
    for (size_t j{}; j != w; ++j) {
      if (v[i][j] == '.') {
        ++num_red;
        continue;
      }
      if (v[i][j] == '#' && t[i][j] == 0) {
        paint(t, v, i, j, rear_type++);
        ++block;
      }
    }
  }

  size_t ans{num_red * (block + 1)};
  for (size_t i{}; i != h; ++i) {
    for (size_t j{}; j != w; ++j) {
      if (v[i][j] == '.') {
        std::set<size_t> types;
        if (valid(i + 1, j) && v[i + 1][j] == '#') {
          types.emplace(t[i + 1][j]);
        }
        if (valid(i - 1, j) && v[i - 1][j] == '#') {
          types.emplace(t[i - 1][j]);
        }
        if (valid(i, j - 1) && v[i][j - 1] == '#') {
          types.emplace(t[i][j - 1]);
        }
        if (valid(i, j + 1) && v[i][j + 1] == '#') {
          types.emplace(t[i][j + 1]);
        }
        ans -= types.size();
      }
    }
  }
  return FUCK(ans, num_red);
}
void solve_all_cases(auto&& solve_case_f)
{
  size_t t{1};
  // std::cin >> t;
  for (size_t i{}; i != t; ++i) {
    if constexpr (std::is_same_v<decltype(solve_case_f()), void>) {
      solve_case_f();
    }
    else {
      print(solve_case_f());
    }
  }
}
int main()
{
  impl::io_accelerator accelerator;
  solve_all_cases(solve_case);
  return 0;
}
