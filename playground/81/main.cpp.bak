#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <string_view>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>
using namespace std;
using i64 = ::std::ptrdiff_t;
using u64 = ::std::size_t;
using vi = ::std::vector<i64>;
using vvi = ::std::vector<vi>;
using vvvi = ::std::vector<vvi>;
using vvvvi = ::std::vector<vvvi>;
using vu = ::std::vector<u64>;
using vvu = ::std::vector<vu>;
using vvvu = ::std::vector<vvu>;
using vvvvu = ::std::vector<vvvu>;
using vb = ::std::vector<bool>;
using vvb = ::std::vector<vb>;
using vc = std::vector<char>;
using vvc = std::vector<vc>;
using pii = ::std::pair<i64, i64>;
using puu = ::std::pair<u64, u64>;
using triplei = ::std::tuple<i64, i64, i64>;
using tripleu = ::std::tuple<u64, u64, u64>;

int main()
{
    u64 n, m, k;
    cin >> n >> m >> k;
    for (u64 i = 0; i != k; ++i) {
        stack<u64> S;
        u64 cur = 1;
        bool ok = true;
        for (u64 j = 0; j != n; ++j) {
            u64 x;
            cin >> x;
            if (x == cur) {
                ++cur;
            }
            else {
                S.push(x);
                if (S.size() > m) {
                    ok = false;
                }
            }
            while (!S.empty() && cur == S.top()) {
                ++cur;
                S.pop();
            }
            // cout << "TOP: " << (!S.empty() ? S.top() : -1) << " x: " << x << '\n';
        }
        cout << (S.empty() && ok ? "YES\n" : "NO\n");
    }
}
