#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <string_view>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>
using namespace std;
using i64 = ::std::ptrdiff_t;
using u64 = ::std::size_t;
using vi = ::std::vector<i64>;
using vvi = ::std::vector<vi>;
using vvvi = ::std::vector<vvi>;
using vvvvi = ::std::vector<vvvi>;
using vu = ::std::vector<u64>;
using vvu = ::std::vector<vu>;
using vvvu = ::std::vector<vvu>;
using vvvvu = ::std::vector<vvvu>;
using vb = ::std::vector<bool>;
using vvb = ::std::vector<vb>;
using vc = std::vector<char>;
using vvc = std::vector<vc>;
using pii = ::std::pair<i64, i64>;
using puu = ::std::pair<u64, u64>;
using triplei = ::std::tuple<i64, i64, i64>;
using tripleu = ::std::tuple<u64, u64, u64>;

int main()
{
    u64 n;
    cin >> n;
    vector<vector<string>> nums(n);
    for (u64 i = 0; i != n; ++i) {
        string s;
        cin >> s;
        auto p = s.find('.');
        decltype(p) last = 0;
        while (p != string::npos) {
            nums[i].push_back(s.substr(last, p - 1));
            last = p + 1;
            p = s.find('.', p + 1);
        }
        nums[i].push_back(s.substr(last));
        reverse(nums[i].begin(), nums[i].end());
    }
    map<string, string> pa;
    for (u64 bit = 0; bit != 5; ++bit) {
        for (u64 i = 1; i != n; ++i) {
            if (nums[i].size() > bit && nums[i - 1].size() > bit) {
                bool hi_same = nums[i].size() == nums[i - 1].size();
                for (u64 j = bit + 1; j != 5; ++j) {
                    if (nums[i][j] != nums[i - 1][j]) {
                        hi_same = false;
                    }
                }
                if (hi_same) {
                    pa[nums[i - 1][bit]] = nums[i][bit];
                }
            }
        }
    }
}
