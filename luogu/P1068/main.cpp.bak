#include <algorithm>
#include <array>
#include <cmath>
#include <cstddef>
#include <iostream>
#include <ranges>
#include <string_view>
#include <vector>

using ::std::size_t;

// constexpr bool debug{false};

template<typename T> T read()
{
  T tmp;
  std::cin >> tmp;
  return tmp;
}
template<typename value_t> class input_value {
public:
  input_value(): value_(read<value_t>()) {}
  input_value(const input_value&) = delete;
  input_value(input_value&&) = delete;
  input_value& operator=(const input_value&) = delete;
  input_value& operator=(input_value&&) = delete;
  ~input_value() = default;
  operator value_t&() { return value(); }
  value_t& value() { return value_; }
private:
  value_t value_;
};
template<size_t i, size_t j, typename value_type> using arr2
    = std::array<std::array<value_type, j>, i>;
template<size_t i, size_t j> using arr2uz = arr2<i, j, size_t>;
template<size_t i, size_t j> using arr2ll = arr2<i, j, long long>;
template<typename value_type> using vec2_impl
    = std::vector<std::vector<value_type>>;
template<typename value_t> class vec2 : public vec2_impl<value_t> {
public:
  vec2(size_t const i, size_t const j)
      : vec2_impl<value_t>(i, std::vector<value_t>(j))
  {}
};
using vec2uz = vec2<size_t>;
using vec2ll = vec2<long long>;
template<typename T> concept is_pair = requires(T t) {
  t.first;
  t.second;
};
void print(auto&& t)
{
  if constexpr (std::ranges::range<decltype(t)>) {
    for (auto&& ele: t) {
      print(ele);
    }
    std::cout << '\n';
  }
  else if constexpr (is_pair<decltype(t)>) {
    std::cout << t.first << ": " << t.second << ", ";
  }
  else {
    std::cout << t << ' ';
  }
}
void debug(std::string_view const& sv, auto&& t)
{
  std::cout << sv << ": ";
  print(t);
}
void input(auto&& t)
{
  if constexpr (std::ranges::range<decltype(t)>) {
    for (auto&& ele: t) {
      input(ele);
    }
  }
  else if constexpr (is_pair<decltype(t)>) {
    std::cin >> t.first >> t.second;
  }
  else {
    std::cin >> t;
  }
}
auto&& operator>>(auto&& is, auto&& t)
{
  if constexpr (std::ranges::range<decltype(t)>) {
    for (auto&& ele: t) {
      is >> ele;
    }
  }
  else if constexpr (is_pair<decltype(t)>) {
    is >> t.first >> t.second;
  }
  else {
    is >> t;
  }
  return is;
}
struct player_t {
  size_t id;
  size_t score;
  auto operator<=>(player_t const& other) const
  {
    auto p{score <=> other.score};
    if (p == std::strong_ordering::equal) {
      return id <=> other.id;
    }
    if (p == std::strong_ordering::greater) {
      return std::strong_ordering::less;
    }
    return std::strong_ordering::greater;
  }
  friend auto&& operator>>(auto&& is, player_t& rhs)
  {
    return is >> rhs.id >> rhs.score;
  }
};
void quick_sort(auto&& coll, long long const l, long long const r)
{
  if (l >= r) {
    return;
  }
  auto i{l - 1};
  auto j{r + 1};
  auto pivot{coll[(l + r) >> 1]};
  while (i < j) {
    while (coll[++i] < pivot) {
    }
    while (coll[--j] > pivot) {
    }
    if (i < j) {
      std::swap(coll[i], coll[j]);
    }
  }
  quick_sort(coll, l, j);
  quick_sort(coll, j + 1, r);
}
void solve_case()
{
  size_t n{};
  size_t m{};
  std::cin >> n >> m;
  std::vector<player_t> v(n);
  std::cin >> v;
  m *= 1.5;
  --m;
  quick_sort(v, 0, v.size() - 1);
  return;

  // Lessen the restriction.
  for (size_t i{m}; i != v.size(); ++i) {
    if (v[i].score != v[i - 1].score) {
      break;
    }
    ++m;
  }
  std::cout << v[m].score << ' ' << m << '\n';
  for (size_t i{}; i != m; ++i) {
    std::cout << v[i].id << ' ' << v[i].score << '\n';
  }
}
int main()
{
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  // std::cout.tie(nullptr);

  size_t n{1};
  // n = read<size_t>();
  for (size_t i{}; i != n; ++i) {
    solve_case();
  }
  return 0;
}
