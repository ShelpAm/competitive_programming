#include <algorithm>
#include <array>
#include <cmath>
#include <cstddef>
#include <iostream>
#include <ranges>
#include <string_view>
#include <vector>

using ::std::size_t;

// constexpr bool debug{false};

template<typename T> T read()
{
  T tmp;
  std::cin >> tmp;
  return tmp;
}
template<typename value_t> class input_value {
public:
  input_value(): value_(read<value_t>()) {}
  input_value(const input_value&) = delete;
  input_value(input_value&&) = delete;
  input_value& operator=(const input_value&) = delete;
  input_value& operator=(input_value&&) = delete;
  ~input_value() = default;
  operator value_t&() { return value(); }
  value_t& value() { return value_; }
private:
  value_t value_;
};
template<size_t i, size_t j, typename value_type> using arr2
    = std::array<std::array<value_type, j>, i>;
template<size_t i, size_t j> using arr2uz = arr2<i, j, size_t>;
template<size_t i, size_t j> using arr2ll = arr2<i, j, long long>;
template<typename value_type> using vec2_impl
    = std::vector<std::vector<value_type>>;
template<typename value_t> class vec2 : public vec2_impl<value_t> {
public:
  vec2(size_t const i, size_t const j)
      : vec2_impl<value_t>(i, std::vector<value_t>(j, {}))
  {}
};
using vec2uz = vec2<size_t>;
using vec2ll = vec2<long long>;
template<typename T> concept is_pair = requires(T t) {
  t.first;
  t.second;
};
void print(auto&& t)
{
  if constexpr (std::ranges::range<decltype(t)>) {
    for (auto&& ele: t) {
      print(ele);
    }
    std::cout << '\n';
  }
  else if constexpr (is_pair<decltype(t)>) {
    std::cout << t.first << ": " << t.second << ", ";
  }
  else {
    std::cout << t << ' ';
  }
}
void debug(std::string_view const& sv, auto&& t)
{
  std::cout << sv << ": ";
  print(t);
}
void input(auto&& t)
{
  if constexpr (std::ranges::range<decltype(t)>) {
    for (auto&& ele: t) {
      input(ele);
    }
  }
  else if constexpr (is_pair<decltype(t)>) {
    std::cin >> t.first >> t.second;
  }
  else {
    std::cin >> t;
  }
}
struct rect {
  size_t x, y, h, w;
};
void copy(auto&& buf, rect const src, rect const dst)
{
  for (size_t i{}; i != src.h; ++i) {
    for (size_t j{}; j != src.w; ++j) {
      buf[dst.x + i][dst.y + j] = buf[src.x + i][src.y + j];
    }
  }
}
void clear(auto&& buf, rect const area)
{
  for (size_t i{}; i != area.h; ++i) {
    for (size_t j{}; j != area.w; ++j) {
      buf[area.x + i][area.y + j] = ' ';
    }
  }
}
void solve_case()
{
  constexpr char slash{'/'};
  constexpr char back_slash{'\\'};
  constexpr char underscore{'_'};

  size_t n{};
  std::cin >> n;

  size_t height{2};
  size_t width{4};

  std::vector<std::string> buf(height * (2 << (n - 1)),
                               std::string(width * (2 << (n - 1)), ' '));
  buf[0][1] = buf[1][0] = slash;
  buf[0][2] = buf[1][3] = back_slash;
  buf[1][1] = buf[1][2] = underscore;

  for (size_t i{1}; i != n; ++i) {
    size_t h{height};
    size_t w{width};
    copy(buf, rect{0, 0, h, w}, rect{h, 0, h, w});
    copy(buf, rect{0, 0, h, w}, rect{h, w, h, w});
    clear(buf, rect{0, 0, h, w});
    copy(buf, rect{h, w, h, w}, rect{0, w / 2, h, w});
    height *= 2;
    width *= 2;
  }

  for (auto const& line: buf) {
    for (auto const col: line) {
      std::cout << col;
    }
    std::cout << '\n';
  }
}
int main()
{
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  // std::cout.tie(nullptr);

  size_t n{1};
  // n = read<size_t>();
  for (size_t i{}; i != n; ++i) {
    solve_case();
  }
  return 0;
}
