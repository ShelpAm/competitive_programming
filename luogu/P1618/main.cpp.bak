#include <algorithm>
#include <array>
#include <cmath>
#include <cstddef>
#include <iostream>
#include <ranges>
#include <string_view>
#include <unordered_set>
#include <vector>

using ::std::size_t;

// constexpr bool debug{false};

template<size_t i, size_t j, typename value_type> using arr2
    = std::array<std::array<value_type, j>, i>;
template<size_t i, size_t j> using arr2uz = arr2<i, j, size_t>;
template<size_t i, size_t j> using arr2ll = arr2<i, j, long long>;
template<typename value_type> using vec2_impl
    = std::vector<std::vector<value_type>>;
template<typename value_t> class vec2 : public vec2_impl<value_t> {
public:
  vec2(size_t const i, size_t const j)
      : vec2_impl<value_t>(i, std::vector<value_t>(j))
  {}
};
using vec2uz = vec2<size_t>;
using vec2ll = vec2<long long>;
template<typename T> concept is_pair = requires(T t) {
  t.first;
  t.second;
};
void print(auto&& t)
{
  if constexpr (std::ranges::range<decltype(t)>) {
    for (auto&& ele: t) {
      print(ele);
    }
    std::cout << '\n';
  }
  else if constexpr (is_pair<decltype(t)>) {
    std::cout << t.first << ": " << t.second << ", ";
  }
  else {
    std::cout << t << ' ';
  }
}
void debug(std::string_view const& sv, auto&& t)
{
  std::cout << sv << ": ";
  print(t);
}
auto&& operator>>(auto&& is, auto&& t)
{
  if constexpr (std::ranges::range<decltype(t)>) {
    for (auto&& ele: t) {
      is >> ele;
    }
  }
  else if constexpr (is_pair<decltype(t)>) {
    is >> t.first >> t.second;
  }
  else {
    is >> t;
  }
  return is;
}
bool non_repeat(size_t a, size_t b, size_t c)
{
  std::unordered_set<size_t> shownups;

  auto is_repeating{[&shownups](size_t& a) {
    while (a != 0) {
      if (shownups.contains(a % 10)) {
        return true;
      }
      shownups.emplace(a % 10);
      a /= 10;
    }
    return false;
  }};

  return !(is_repeating(a) || is_repeating(b) || is_repeating(c));
}
void solve_case()
{
  size_t a{};
  size_t b{};
  size_t c{};
  std::cin >> a >> b >> c;

  if (a == 0) {
    std::cout << "No!!!";
    return;
  }

  bool found{false};
  for (size_t i{1}; i != 10; ++i) {
    for (size_t j{1}; j != 10; ++j) {
      for (size_t k{1}; k != 10; ++k) {
        size_t elementary{i * 100 + j * 10 + k};
        if (elementary % a != 0) {
          continue;
        }
        auto e2{elementary * b / a};
        auto e3{elementary * c / a};
        if (e3 >= 1000) {
          continue;
        }
        if (non_repeat(elementary, e2, e3)) {
          found = true;
          std::cout << elementary << ' ' << e2 << ' ' << e3 << '\n';
        }
      }
    }
  }
  if (!found) {
    std::cout << "No!!!";
  }
}
int main()
{
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  // std::cout.tie(nullptr);

  size_t n{1};
  // std::cin >> n;
  for (size_t i{}; i != n; ++i) {
    solve_case();
  }
  return 0;
}
