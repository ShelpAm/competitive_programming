#include <algorithm>
#include <array>
#include <cmath>
#include <cstddef>
#include <iostream>
#include <ranges>
#include <string_view>
#include <vector>

// configs
using ::std::size_t;

namespace impl {
  template<typename value_t> using vec2 = std::vector<std::vector<value_t>>;
  template<typename T> concept is_pair = requires(T t) {
    t.first;
    t.second;
  };
} // namespace impl
template<size_t i, size_t j, typename value_t> using arr2 = std::array<std::array<value_t, j>, i>;
template<size_t i, size_t j> using arr2uz = arr2<i, j, size_t>;
template<size_t i, size_t j> using arr2ll = arr2<i, j, long long>;
template<typename value_t> class vec2 : public impl::vec2<value_t> {
public:
  vec2(size_t const i, size_t const j): impl::vec2<value_t>(i, std::vector<value_t>(j)) {}
};
using vec2uz = vec2<size_t>;
using vec2ll = vec2<long long>;
auto&& operator>>(auto&& is, auto&& t)
{
  if constexpr (std::ranges::range<decltype(t)>) {
    for (auto&& ele: t) {
      is >> ele;
    }
  }
  else if constexpr (impl::is_pair<decltype(t)>) {
    is >> t.first >> t.second;
  }
  else {
    is >> t;
  }
  return is;
}
auto&& operator<<(auto&& os, auto&& t)
{
  if constexpr (std::ranges::range<decltype(t)>) {
    for (auto&& ele: t) {
      os << ele << ' ';
    }
    os << '\n';
  }
  else if constexpr (impl::is_pair<decltype(t)>) {
    os << t.first << ": " << t.second << ", ";
  }
  else {
    os << t << ' ';
  }
  return os;
}
void debug([[maybe_unused]] std::string_view const& sv, [[maybe_unused]] auto&& t)
{
#ifdef DEBUG
  std::cout << sv << ": " << t << '\n';
#endif
}
size_t match(std::string_view const src, std::string_view const pat, size_t base)
{
  std::vector<size_t> next(pat.size() + 1);
  for (size_t i{2}; i != next.size(); ++i) {
    if (pat[next[i - 1]] == pat[i - 1]) {
      next[i] = next[i - 1] + 1;
    }
  }
  std::cout << next;
  size_t j{};
  size_t k{};
  while (base + k != src.size()) {
    while (base + k != src.size() && j != pat.size() && src[base + k] == pat[j]) {
      ++k;
      ++j;
    }
    if (j == pat.size()) {
      return base;
    }
    if (base + k == src.size()) {
      return -1;
    }
    base += j - next[j - 1] + 1;
    k = next[j - 1];
    j = next[j - 1];
  }
  return -1;
}
void solve_case()
{
  std::string src;
  std::string pat;
  std::cin >> src >> pat;
  // Brute-force
  // size_t i{src.find(pat)};
  // while (i != std::string::npos) {
  //   std::cout << i + 1 << '\n';
  //   i = src.find(pat, i + 1);
  // }
  //
  // std::string s;
  // for (size_t i{}; i != pat.size(); ++i) {
  //   s += pat[i];
  //   std::string t{s};
  //   t.pop_back();
  //   bool _0{true};
  //   for (size_t j{}; j != s.size() - 1; ++j) {
  //     if (s.substr(s.size() - t.size()) == t) {
  //       _0 = false;
  //       std::cout << s.size() - j - 1 << ' ';
  //       break;
  //     }
  //     t.pop_back();
  //   }
  //   if (_0) {
  //     std::cout << "0 ";
  //   }
  // }

  size_t i{match(src, pat, 0)};
  while (i != -1UZ) {
    std::cout << i + 1 << '\n';
    i = match(src, pat, i + 1);
  }
}
int main()
{
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  // std::cout.tie(nullptr);

  size_t t{1};
  // std::cin >> t;
  for (size_t i{}; i != t; ++i) {
    solve_case();
  }
  return 0;
}
