#include <algorithm>
#include <array>
#include <cstddef>
#include <iostream>
#include <ranges>
#include <string>
#include <string_view>
#include <vector>

using ::std::size_t;

// constexpr bool debug{false};

template<typename T> T read()
{
  T tmp;
  std::cin >> tmp;
  return tmp;
}
template<typename value_t> class input_value {
public:
  input_value(): value_(read<value_t>()) {}
  input_value(const input_value&) = delete;
  input_value(input_value&&) = delete;
  input_value& operator=(const input_value&) = delete;
  input_value& operator=(input_value&&) = delete;
  ~input_value() = default;
  operator value_t&() { return value(); }
  value_t& value() { return value_; }
private:
  value_t value_;
};
template<size_t i, size_t j, typename value_type> using arr2
    = std::array<std::array<value_type, j>, i>;
template<size_t i, size_t j> using arr2uz = arr2<i, j, size_t>;
template<size_t i, size_t j> using arr2ll = arr2<i, j, long long>;
template<typename value_type> using vec2_impl
    = std::vector<std::vector<value_type>>;
template<typename value_t> class vec2 : public vec2_impl<value_t> {
public:
  vec2(size_t const i, size_t const j)
      : vec2_impl<value_t>(i, std::vector<value_t>(j, {}))
  {}
};
using vec2uz = vec2<size_t>;
using vec2ll = vec2<long long>;
template<typename T> concept is_pair = requires(T t) {
  t.first;
  t.second;
};
void print(auto&& t)
{
  if constexpr (std::ranges::range<decltype(t)>) {
    for (auto&& ele: t) {
      print(ele);
    }
    std::cout << '\n';
  }
  else if constexpr (is_pair<decltype(t)>) {
    std::cout << t.first << ": " << t.second << ", ";
  }
  else {
    std::cout << t << ' ';
  }
}
void debug(std::string_view const& sv, auto&& t)
{
  std::cout << sv << ": ";
  print(t);
}
void input(auto&& t)
{
  if constexpr (std::ranges::range<decltype(t)>) {
    for (auto&& ele: t) {
      input(ele);
    }
  }
  else if constexpr (is_pair<decltype(t)>) {
    std::cin >> t.first >> t.second;
  }
  else {
    std::cin >> t;
  }
}
std::string construct_palindrome(std::string_view const& s)
{
  // auto middle_end{(s.size() - 1) / 2 + 1};
  // std::string remainder(s.size() / 2, '\0');
  // std::ranges::reverse_copy(s.begin(), s.begin() + s.size() / 2,
  //                           remainder.begin());
  // return std::string{s.substr(0, middle_end)} + remainder;
  std::string result{s};
  for (size_t i{}; i != (s.size() - 1) / 2; ++i) {
    result[s.size() - i - 1] = s[i];
  }
  return result;
}
bool greater(std::string_view const& lhs, std::string_view const& rhs)
{
  if (lhs.size() != rhs.size()) {
    return lhs.size() > rhs.size();
  }
  return lhs > rhs;
}
std::string min_palindrome_number(std::string s)
{
  if (auto palindrome{construct_palindrome(s)}; greater(palindrome, s)) {
    return palindrome;
  }
  for (size_t i{(s.size() - 1) / 2}; i != -1UZ; --i) {
    // std::cout << "pos: " << i << " char: " << s[i] << '\n';
    if (s[i] != '9') {
      ++s[i];
      break;
    }
    s[i] = '0';
  }
  // std::cout << "processed s: " << s << '\n';
  return construct_palindrome(s);
}
void solve_case()
{
  std::string s;
  std::cin >> s;

  if (std::ranges::count(s, '9') == s.size()) {
    s = '1' + std::string(s.size(), '0');
  }
  std::cout << min_palindrome_number(s);
}
int main()
{
  auto n{1};
  // n = read<size_t>();
  for (size_t i{}; i != n; ++i) {
    solve_case();
  }
  return 0;
}
