#include <algorithm>
#include <array>
#include <cmath>
#include <cstddef>
#include <iostream>
#include <queue>
#include <ranges>
#include <string_view>
#include <vector>

// configs
using ::std::size_t;

namespace impl {
  template<typename value_t> using vec2 = std::vector<std::vector<value_t>>;
  template<typename T> concept is_pair = requires(T t) {
    t.first;
    t.second;
  };
} // namespace impl
template<size_t i, size_t j, typename value_t> using arr2 = std::array<std::array<value_t, j>, i>;
template<size_t i, size_t j> using arr2uz = arr2<i, j, size_t>;
template<size_t i, size_t j> using arr2ll = arr2<i, j, long long>;
template<typename value_t> class vec2 : public impl::vec2<value_t> {
public:
  vec2(size_t const i, size_t const j, size_t const v)
      : impl::vec2<value_t>(i, std::vector<value_t>(j, v))
  {}
};
using vec2uz = vec2<size_t>;
using vec2ll = vec2<long long>;
auto&& operator>>(auto&& is, auto&& t)
{
  if constexpr (std::ranges::range<decltype(t)>) {
    for (auto&& ele: t) {
      is >> ele;
    }
  }
  else if constexpr (impl::is_pair<decltype(t)>) {
    is >> t.first >> t.second;
  }
  else {
    is >> t;
  }
  return is;
}
auto&& operator<<(auto&& os, auto&& t)
{
  if constexpr (std::ranges::range<decltype(t)>) {
    for (auto&& ele: t) {
      os << ele << ' ';
    }
    os << '\n';
  }
  else if constexpr (impl::is_pair<decltype(t)>) {
    os << t.first << ": " << t.second << ", ";
  }
  else {
    os << t << ' ';
  }
  return os;
}
void debug(std::string_view const& sv, auto&& t)
{
#ifdef DEBUG
  std::cout << sv << ": " << t << '\n';
#endif
}
void solve_case()
{
  size_t m{};
  std::cin >> m;

  constexpr long long max_size{304};
  vec2uz break_time(max_size, max_size, INFINITY);
  auto set{[&](auto const x, auto const y, auto const t) {
    if (x >= 0 && x < max_size && y >= 0 && y < max_size && break_time[x][y] > t) {
      break_time[x][y] = t;
    }
  }};
  for (size_t i{}; i != m; ++i) {
    long long x{};
    long long y{};
    size_t t{};
    std::cin >> x >> y >> t;
    set(x, y, t);
    set(x + 1, y, t);
    set(x - 1, y, t);
    set(x, y + 1, t);
    set(x, y - 1, t);
  }

  // std::cout << break_time;

  struct pos_t {
    auto operator<=>(pos_t const&) const = default;
    auto operator+(pos_t const& rhs) const { return pos_t{x + rhs.x, y + rhs.y, time + 1}; }
    long long x;
    long long y;
    size_t time;
  };
  std::queue<pos_t> q;
  q.push({0, 0, 0});
  while (!q.empty()) {
    auto&& p{q.front()};
    if (p.x >= 0 && p.x < max_size && p.y >= 0 && p.y < max_size && break_time[p.x][p.y] > p.time) {
      if (break_time[p.x][p.y] == INFINITY) {
        std::cout << p.time;
        return;
      }
      break_time[p.x][p.y] = 0; // Make this just visited point unavailable.
      q.push({p.x + 1, p.y, p.time + 1});
      q.push({p.x - 1, p.y, p.time + 1});
      q.push({p.x, p.y + 1, p.time + 1});
      q.push({p.x, p.y - 1, p.time + 1});
    }
    q.pop();
  }
  std::cout << -1;
}
int main()
{
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  // std::cout.tie(nullptr);

  size_t t{1};
  // std::cin >> t;
  for (size_t i{}; i != t; ++i) {
    solve_case();
  }
  return 0;
}
