#include <algorithm>
#include <array>
#include <cmath>
#include <cstddef>
#include <iostream>
#include <ranges>
#include <string_view>
#include <vector>

// configs
using ::std::size_t;

namespace impl {
  template<typename value_t> using vec2 = std::vector<std::vector<value_t>>;
  template<typename T> concept is_pair = requires(T t) {
    t.first;
    t.second;
  };
} // namespace impl
template<size_t i, size_t j, typename value_t> using arr2 = std::array<std::array<value_t, j>, i>;
template<size_t i, size_t j> using arr2uz = arr2<i, j, size_t>;
template<size_t i, size_t j> using arr2ll = arr2<i, j, long long>;
template<typename value_t> class vec2 : public impl::vec2<value_t> {
public:
  vec2(size_t const i, size_t const j): impl::vec2<value_t>(i, std::vector<value_t>(j)) {}
};
using vec2uz = vec2<size_t>;
using vec2ll = vec2<long long>;
auto&& operator>>(auto&& is, auto&& t)
{
  if constexpr (std::ranges::range<decltype(t)>) {
    for (auto&& ele: t) {
      is >> ele;
    }
  }
  else if constexpr (impl::is_pair<decltype(t)>) {
    is >> t.first >> t.second;
  }
  else {
    is >> t;
  }
  return is;
}
auto&& operator<<(auto&& os, auto&& t)
{
  if constexpr (std::ranges::range<decltype(t)>) {
    for (auto&& ele: t) {
      os << ele << ' ';
    }
    os << '\n';
  }
  else if constexpr (impl::is_pair<decltype(t)>) {
    os << t.first << ": " << t.second << ", ";
  }
  else {
    os << t << ' ';
  }
  return os;
}
void debug([[maybe_unused]] std::string_view const& sv, [[maybe_unused]] auto&& t)
{
#ifdef DEBUG
  std::cout << sv << ": " << t << '\n';
#endif
}
constexpr size_t base{131};
struct hash_t {
  hash_t(std::string_view const s): hash(s.size() + 1), p(s.size() + 1, 1)
  {
    for (size_t i{1}; i != s.size() + 1; ++i) {
      hash[i] = hash[i - 1] * p[1] + s[i - 1];
      p[i] = p[i - 1] * base;
    }
  }
  std::vector<size_t> hash;
  std::vector<size_t> p;
  [[nodiscard]] long long hashed(size_t const l, size_t const r) const
  {
    return hash[r] - hash[l - 1] * p[r - l + 1];
  }
};
void solve_case()
{
  std::string s;
  std::string t;
  std::cin >> s >> t;
  hash_t ss{s};
  hash_t tt{t};

  std::cout << "Length of s is " << s.size() << '\n';
  std::cout << "Length of t is " << t.size() << '\n';
  size_t ans{};
  for (size_t len{std::min(s.size(), t.size())}; len != 0; --len) {
    if (ss.hashed(1, len) == tt.hashed(t.size() - len + 1, t.size())) {
      ans = std::max(ans, len);
      break;
    }
  }
  for (size_t len{std::min(s.size(), t.size())}; len != 0; --len) {
    if (tt.hashed(1, len) == ss.hashed(s.size() - len + 1, s.size())) {
      ans = std::max(ans, len);
      break;
    }
  }
  std::cout << ans;
}
int main()
{
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  // std::cout.tie(nullptr);

  size_t t{1};
  // std::cin >> t;
  for (size_t i{}; i != t; ++i) {
    solve_case();
  }
  return 0;
}
